"""Initialize models

Revision ID: 7efcdc1c4efa
Revises: 
Create Date: 2025-08-19 07:46:21.898059

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '7efcdc1c4efa'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('experience_levels',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('genres',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('orientations',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('positions',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('recruitment_types',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('regions',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nickname', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('bookmark_count', sa.Integer(), nullable=False),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('login_type', postgresql.ENUM('email', 'social', name='login_type_enum'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_nickname'), 'users', ['nickname'], unique=True)
    op.create_table('profiles',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('social_image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('views_count', sa.Integer(), nullable=False),
    sa.Column('bookmarks_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('recruiting_posts',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('band_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('band_composition', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('activity_time', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('contact_info', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('application_method', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('practice_frequency_time', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('other_conditions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('views_count', sa.Integer(), nullable=False),
    sa.Column('comments_count', sa.Integer(), nullable=False),
    sa.Column('bookmarks_count', sa.Integer(), nullable=False),
    sa.Column('is_closed', sa.Boolean(), nullable=False),
    sa.Column('orientation_id', sa.Uuid(), nullable=True),
    sa.Column('recruitment_type_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['orientation_id'], ['orientations.id'], ),
    sa.ForeignKeyConstraint(['recruitment_type_id'], ['recruitment_types.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('jti', sa.Uuid(), nullable=False),
    sa.Column('expired_at', sa.DateTime(), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('jti')
    )
    op.create_table('social_accounts',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('provider', postgresql.ENUM('google', 'naver', 'kakao', 'apple', name='social_provider_enum'), nullable=False),
    sa.Column('provider_id', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_bookmarks',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('bookmarked_user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['bookmarked_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'bookmarked_user_id', name='uq_user_bookmark')
    )
    op.create_table('comments',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('path', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('parent_comment_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['comments.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['recruiting_posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_comments_path'), 'comments', ['path'], unique=False)
    op.create_table('post_bookmarks',
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('bookmarked_post_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['bookmarked_post_id'], ['recruiting_posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'bookmarked_post_id', name='uq_post_bookmark')
    )
    op.create_table('profile_genres',
    sa.Column('profile_id', sa.Uuid(), nullable=False),
    sa.Column('genre_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('profile_id', 'genre_id')
    )
    op.create_table('profile_positions',
    sa.Column('profile_id', sa.Uuid(), nullable=False),
    sa.Column('position_id', sa.Uuid(), nullable=False),
    sa.Column('experience_level_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['experience_level_id'], ['experience_levels.id'], ),
    sa.ForeignKeyConstraint(['position_id'], ['positions.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('profile_id', 'position_id')
    )
    op.create_table('profile_regions',
    sa.Column('profile_id', sa.Uuid(), nullable=False),
    sa.Column('region_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], ),
    sa.PrimaryKeyConstraint('profile_id', 'region_id')
    )
    op.create_table('recruiting_post_genres',
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('genre_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['recruiting_posts.id'], ),
    sa.PrimaryKeyConstraint('post_id', 'genre_id')
    )
    op.create_table('recruiting_post_positions',
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('position_id', sa.Uuid(), nullable=False),
    sa.Column('desired_experience_level_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['desired_experience_level_id'], ['experience_levels.id'], ),
    sa.ForeignKeyConstraint(['position_id'], ['positions.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['recruiting_posts.id'], ),
    sa.PrimaryKeyConstraint('post_id', 'position_id')
    )
    op.create_table('recruiting_post_regions',
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('region_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['recruiting_posts.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], ),
    sa.PrimaryKeyConstraint('post_id', 'region_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('recruiting_post_regions')
    op.drop_table('recruiting_post_positions')
    op.drop_table('recruiting_post_genres')
    op.drop_table('profile_regions')
    op.drop_table('profile_positions')
    op.drop_table('profile_genres')
    op.drop_table('post_bookmarks')
    op.drop_index(op.f('ix_comments_path'), table_name='comments')
    op.drop_table('comments')
    op.drop_table('user_bookmarks')
    op.drop_table('social_accounts')
    op.drop_table('refresh_tokens')
    op.drop_table('recruiting_posts')
    op.drop_table('profiles')
    op.drop_index(op.f('ix_users_nickname'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('regions')
    op.drop_table('recruitment_types')
    op.drop_table('positions')
    op.drop_table('orientations')
    op.drop_table('genres')
    op.drop_table('experience_levels')
    # ### end Alembic commands ###
